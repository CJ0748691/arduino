// pins

#define LEDs 8
int LED_pins[LEDs] = {2, 3, 4, 5, 6, 7, 8, 9};
#define tables 5
int table_pins[tables] = {A1, A2, A3, A4, A5};
#define inputs 14
int input_pin = A0;

// events
#define zero  1<<0
#define one   1<<1
#define two   1<<2
#define three 1<<3
#define four  1<<4
#define five  1<<5
#define six   1<<6
#define seven 1<<7
#define eight 1<<8
#define nine  1<<9
#define equ   1<<10// =
#define clr   1<<11// C
#define add   1<<12// +
#define minus 1<<13// -
#define multp 1<<14// X
#define dvd   1<<15// /
#define dot   (long long)1<<16// .

int buffer[tables] = {0, 0, 0, 0, 0};


void setup() {
  for (int i = 0; i < LEDs; i++) {
    pinMode(LED_pins[i], OUTPUT);
  }
  for (int i = 0; i < tables; i++) {
    pinMode(table_pins[i], OUTPUT);
  }
  pinMode(input_pin, INPUT);
}

void loop() {
  static int event = 0;

  // there is an event
  if (event = check_Input()) {
    eventHandler(event);

    // keep pressing
    while (check_Input()) {
      lightUp();
    }
  }
  // there is no event
  lightUp();

}


int eventHandler(int handle) {


  ////// 1.  operands[stage]
  //////  operands[stage]
  //////  operands[stage]
  //////  operands[stage]
  //////
  //////2. a struct save those, and use function to pass

  static int stage = 0;
  // a + b = c  'a' is stage0, '+' and 'b' is stage1, '=' is stage2
  static double operands[] = {0, 0, 0};
  static int operate = 0; // 0 is add, 1 is minus, 2 is multip, 3 is devide
  static int dot_position[] = { -1, -1, -1};

  int present_stage = stage;

  // configure an operand to represent_stage

  // case 1. restart
  if (stage == 2 || handle & clr) {
    for (int i = 0; i < 3; i++) {
      operands[i] = 0;
      dot_position[i] = 0;
    }
    stage = 0;

    // case 2. input numbers
  } else if (handle < 1024) {
    double num = Log(2, handle)
    if (dot_position[stage] > -1) {
      dot_position[stage]++;
      operands[stage] += num / Pow(10, dot_position[stage]);
    } else
      operands[stage] = operands[stage] * 10 % 100000 + num;

    // case 3. operator
  } else if (handle & dot) {
    dot_position[stage] = 0;
  }
  else if (handle & add) {
    operate = 0;
    stage = 1;
  } else if (handle & minus) {
    operate = 1;
    stage = 1;
  } else if (handle & multp) {
    operate = 2;
    stage = 1;
  } else if (handle & dvd) {
    operate = 3;
    stage = 1;
  } else if (handle & equ) {
    if (stage == 1) {
      if (operate == 0) operands[2] = operands[0] + operands[1];
      if (operate == 1) operands[2] = operands[0] - operands[1];
      if (operate == 2) operands[2] = operands[0] * operands[1];
      if (operate == 3) operands[2] = operands[0] / operands[1];
      present_stage = 2;
      stage = 2;
      dot_position[stage] = tables - Log(10, operands[stage]) - 1
    }
  } else
    return -1;

  //upload
  upload();
  if (operands[stage] - (int)operands[stage] == 0) {
    for (int i = 0; i < tables; i++) {
    buffer[i] = operands[stage] < Pow(10, i) ? 20 : operands[stage] / Pow(10, i) % 10;
    }
  } else if (operands[stage] > Pow(10, tables)) {
    for (int i = 0; i < tables; i++) {
    buffer[i] = operands[stage] / Pow(10, i) % 10;
    }
  } else {
    int integerize = operands[stage] * Pow(10, dot_position);
    for (int i = 0; i < tables; i++) {
    buffer[i] = integerize / Pow(10, i) % 10 + 10 * (dot_position[stage] == i);
    }
  }

  return 0;
}
void upload() {
  /*
    buffer[0] = (operands[present_stage] / 1) % 10;
    buffer[1] = (operands[present_stage] / 10) % 10;
    buffer[2] = (operands[present_stage] / 100) % 10;
    buffer[3] = (operands[present_stage] / 1000) % 10;
    buffer[4] = (operands[present_stage] / 10000) % 10;
  */
}


void lightUp() {
  static int digital_mapping[21][8] = {
    {1, 1, 1, 1, 1, 1, 0, 0},
    {0, 1, 1, 0, 0, 0, 0, 0},
    {1, 1, 0, 1, 1, 0, 1, 0},
    {1, 1, 1, 1, 0, 0, 1, 0},
    {0, 1, 1, 0, 0, 1, 1, 0},
    {1, 0, 1, 1, 0, 1, 1, 0},
    {1, 0, 1, 1, 1, 1, 1, 0},
    {1, 1, 1, 0, 0, 0, 0, 0},
    {1, 1, 1, 1, 1, 1, 1, 0},
    {1, 1, 1, 1, 0, 1, 1, 0},
    {1, 1, 1, 1, 1, 1, 0, 1},
    {0, 1, 1, 0, 0, 0, 0, 1},
    {1, 1, 0, 1, 1, 0, 1, 1},
    {1, 1, 1, 1, 0, 0, 1, 1},
    {0, 1, 1, 0, 0, 1, 1, 1},
    {1, 0, 1, 1, 0, 1, 1, 1},
    {1, 0, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 0, 0, 0, 0, 1},
    {1, 1, 1, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 0, 1, 1, 1},
    {0, 0, 0, 0, 0, 0, 0, 0}
  };

  for (int i = 0; i < tables; i++) {

    // light the LED
    for (int j = 0; j < LEDs; j++) {
      digitalWrite(LED_pins[j], digital_mapping[buffer[i]][j]);
    }

    // control the table pins
    digitalWrite(table_pins[i], LOW);

    // keep last light, so that you can sighted-stopped
    delay(2);

    // fastly close last light, so that it won't be influenced by next step
    digitalWrite(table_pins[i], HIGH);
  }
}

int check_Input() {

  static int events_mapping[inputs] =
  { clr, nine, eight, seven,
    multp, six, five, four,
    add, three, two, one,
    equ, zero
  };
  static int min_value = 130;
  static int intervals[inputs] = {
    //    112,123,136,151,170,184,200,219,244,274,313,363,436,612};
    132, 191, 280, 365, 417, 485, 575, 634, 704, 767, 844, 898, 960, 1007
  };
  int read_value;
  read_value = analogRead(input_pin);

  // nothing happened, or catch a garbage signal
  if (read_value < min_value)
    return 0;

  for (int i = inputs - 1; i >= 0; i--) {
    if (read_value > intervals[i] - 12)
      return events_mapping[i];
  }
  return -1;

}

