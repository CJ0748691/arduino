
#define LEDs 7
#define tables 3
#define inputs 14



int LED_pins[]={2,3,4,5,6,7,8};
int table_pins[]={10,11,12};
//int input_pins[button_groups]={A0,A1,A2,A3,A4};
int input_pin=A0;

#define zero  1<<0
#define one   1<<1
#define two   1<<2
#define three 1<<3
#define four  1<<4
#define five  1<<5
#define six   1<<6
#define seven 1<<7
#define eight 1<<8
#define nine  1<<9
#define equ   1<<10// =
#define clr 1<<11// C
#define multp 1<<12// X
#define add   1<<13// +

int buffer[tables]={0,0,0};

int digital_mapping[11][7]={
{1, 1, 1, 1, 1, 1, 0},
{0, 1, 1, 0, 0, 0, 0},
{1, 1, 0, 1, 1, 0, 1},
{1, 1, 1, 1, 0, 0, 1},
{0, 1, 1, 0, 0, 1, 1},
{1, 0, 1, 1, 0, 1, 1},
{1, 0, 1, 1, 1, 1, 1},
{1, 1, 1, 0, 0, 0, 0},
{1, 1, 1, 1, 1, 1, 1},
{1, 1, 1, 1, 0, 1, 1},
{0, 0, 0, 0, 0, 0, 0}
};


void lightUp();
int check_Input();
int eventHandler(int);

void setup(){
  //Serial.begin(9600);
  for(int i=0;i<LEDs;i++){
    pinMode(LED_pins[i],OUTPUT);
  }
  for(int i=0;i<tables;i++){
    pinMode(table_pins[i],OUTPUT);
  }
  
}

void loop(){
  static int event=0;
  
  //Serial.print("\nin loop\n");
  if(event=check_Input()){
    eventHandler(event);
    while(check_Input()){
      
  //Serial.print("\nin while\n");
      lightUp();
    }
  }
  lightUp();
    /*
  if(handleButton=check_Input()){
    eventHandler(check_Input());
        //Serial.print(handleButton);
      while(check_Input()){
        lightUp();  
      }
    }else{
    lightUp();
  }*/
  //delay(100);
}



int stage=0;
int operands[]={0,0,0};
int the_operator=0;//0 is add, 1 is multp

int eventHandler(int handle){
  /*static int stage=0;
  static int operands[]={0,0,0};
  static int the_operator=0;//0 is add, 1 is multp
  */
    
  //Serial.print("\n  HANDLE\n");
  //Serial.print(handle);
  //Serial.print("\n    ");
  int this_stage=stage;
  //configure an operand to represent
  if(this_stage==2 || handle & clr){
    for(int i=0;i<3;i++) operands[i]=0;
    stage=0;

  }else if(handle<1024){
    for(int i = 0; i<10; i++){
      if(handle & (1<<i)){
        operands[stage] = operands[stage] * 10 % 1000 + i;
        break;
      }
    }
  }else if(handle & add){
    the_operator=0;
    stage=1;
  }else if(handle & multp){
    the_operator=1;
    stage=1;
  }else if(handle & equ){
    if(stage==1){
      if(the_operator==0) operands[2]=operands[0]+operands[1];
      if(the_operator==1) operands[2]=operands[0]*operands[1];
      //delay(1200);
      stage=2;
      this_stage=2;
    }
  }else{
    return -1;
  }
  //upload
  buffer[0]=(operands[this_stage]/1)%10;
  buffer[1]=(operands[this_stage]/10)%10;
  buffer[2]=(operands[this_stage]/100)%10;
  /*
  Serial.print(this_stage);
  Serial.print("\n    operands[0]");
  Serial.print(operands[0]);
  Serial.print("\n    operands[1]");
  Serial.print(operands[1]);
  Serial.print("\n    operands[2]");
  Serial.print(operands[2]);
  delay(2000);
  Serial.print("\n    ");
  */
  return 0;
}


void lightUp(){
  for(int i=0;i<tables;i++){
    //control a Table to light
    for(int j=0;j<tables;j++){
      digitalWrite(table_pins[j],LOW);
    }
    for(int j=0;j<LEDs;j++){
      digitalWrite(LED_pins[j],digital_mapping[11][j]);
    }
    ///delay(600);
    //digitalWrite(table_pins[i],HIGH);
    
    //light the table
    for(int j=0;j<LEDs;j++){
      digitalWrite(LED_pins[j],digital_mapping[buffer[i]][j]);
    }
    
    delay(2);
  }
  /*
  Serial.print("\n      &&&");
  Serial.print(buffer[0]);
    Serial.print("\n      &&&");
  Serial.print(buffer[1]);
    Serial.print("\n      &&&");
  Serial.print(buffer[2]);
    Serial.print("\n");
    */
}

int check_Input(){
  static int little_map[inputs]=
    {clr,nine,eight,seven,
    multp,six,five,four,
    add,three,two,one,
    equ,zero,
    };
  static int min_value=90;
  static int intervals[inputs]={
    112,123,136,151,170,184,200,219,244,274,313,363,436,612};
  
  int read_value;
  read_value=analogRead(input_pin);
 

  if(read_value<min_value)
    return 0;

 /*
    Serial.print("============\n     ");
        Serial.print("\n    ");
        Serial.print(read_value);
        Serial.print("\n============\n");
 */
  for(int i=0;i<inputs;i++){
    if(read_value<=intervals[i]+5)
      return little_map[i];
  }
  return -1;
     
}

